# -*- ruby -*-
#--
# Copyright 2008 Danny Coates, Ashkan Farhadtouski
# All rights reserved.
# See LICENSE for permissions.
#++
# AUTOGENERATED ComplexType

module HealthVault
  module WCData
  module Thing
  module Questionanswer
  
      class Questionanswer < ComplexType
        
  
			 
			 
       
        #<b>REQUIRED</b>
        #<b>summary</b>: Date and time the question was asked.
#<em>value</em> is a HealthVault::WCData::Dates::Datetime
        def when=(value)
          @children['when'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Dates::Datetime
        def when
          return @children['when'][:value]
        end
       
  
			 
			 
       
        #<b>REQUIRED</b>
        #<b>summary</b>: The question that was asked.
#<b>remarks</b>: A list of vocabularies may be found in the preferred vocabulary. Contact the HealthVault team to help define the preferred vocabulary.
#<b>preferred-vocabulary</b>: question-sets
#<em>value</em> is a HealthVault::WCData::Thing::Types::Codablevalue
        def question=(value)
          @children['question'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Codablevalue
        def question
          return @children['question'][:value]
        end
       
  
			 
			 
       
        #<em>value</em> is a HealthVault::WCData::Thing::Types::Codablevalue
        def add_answer_choice(value)
          @children['answer-choice'][:value] << value
        end
        
        #<em>value</em> is a #HealthVault::WCData::Thing::Types::Codablevalue
        def remove_answer_choice(value)
            @children['answer-choice'][:value].delete(value)
        end
        
        
        #<b>summary</b>: The list of possible answers to this question.
#<b>remarks</b>: Questions that are answered using free-form text will not specify answer choices.
#<b>preferred-vocabulary</b>: answer-choice-sets
#<b>returns</b>: a HealthVault::WCData::Thing::Types::Codablevalue Array
        def answer_choice
          return @children['answer-choice'][:value]
        end
       
  
			 
			 
       
        #<em>value</em> is a HealthVault::WCData::Thing::Types::Codablevalue
        def add_answer(value)
          @children['answer'][:value] << value
        end
        
        #<em>value</em> is a #HealthVault::WCData::Thing::Types::Codablevalue
        def remove_answer(value)
            @children['answer'][:value].delete(value)
        end
        
        
        #<b>summary</b>: The recorded answers.
#<b>remarks</b>: In many cases, the coding of the answer is identical to the coding of the selected answer-choices.
#<b>returns</b>: a HealthVault::WCData::Thing::Types::Codablevalue Array
        def answer
          return @children['answer'][:value]
        end
       
  
      
        def initialize
          super
          self.tag_name = 'question-answer'
        
          
          @children['when'] = {:name => 'when', :class => HealthVault::WCData::Dates::Datetime, :value => nil, :min => 1, :max => 1, :order => 1, :place => :element, :choice => 0 }
            
          @children['when'][:value] = HealthVault::WCData::Dates::Datetime.new
            
          
        
          
          @children['question'] = {:name => 'question', :class => HealthVault::WCData::Thing::Types::Codablevalue, :value => nil, :min => 1, :max => 1, :order => 2, :place => :element, :choice => 0 }
            
          @children['question'][:value] = HealthVault::WCData::Thing::Types::Codablevalue.new
            
          
        
          
          @children['answer-choice'] = {:name => 'answer-choice', :class => HealthVault::WCData::Thing::Types::Codablevalue, :value => Array.new, :min => 0, :max => 999999, :order => 3, :place => :element, :choice => 0 }
          
        
          
          @children['answer'] = {:name => 'answer', :class => HealthVault::WCData::Thing::Types::Codablevalue, :value => Array.new, :min => 0, :max => 999999, :order => 4, :place => :element, :choice => 0 }
          
        
        end
      end
  end
  end
  
  end
end
