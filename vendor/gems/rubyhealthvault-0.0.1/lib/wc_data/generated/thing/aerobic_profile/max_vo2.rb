# -*- ruby -*-
#--
# Copyright 2008 Danny Coates, Ashkan Farhadtouski
# All rights reserved.
# See LICENSE for permissions.
#++
# AUTOGENERATED ComplexType

module HealthVault
  module WCData
  module Thing
  module Aerobicprofile
  
      class MaxVO2 < ComplexType
        
  
			 
			 
       
        
        #<b>summary</b>: The amount of oxygen utilized per minute of exercise.
#<b>remarks</b>: Absolute VO2 max is measured in liters per minute (l/min).
#<em>value</em> is a HealthVault::WCData::Thing::Types::PositiveDouble
        def absolute=(value)
          @children['absolute'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::PositiveDouble
        def absolute
          return @children['absolute'][:value]
        end
       
  
			 
			 
       
        
        #<b>summary</b>: The amount of oxygen utilized per kilogram body weight per minute.
#<b>remarks</b>: Relative VO2 max is measured in milliters per kilogram per minute (ml/kg/min). This measurement is the more common measurement used to compare aerobic performance.
#<em>value</em> is a HealthVault::WCData::Thing::Types::PositiveDouble
        def relative=(value)
          @children['relative'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::PositiveDouble
        def relative
          return @children['relative'][:value]
        end
       
  
      
        def initialize
          super
          self.tag_name = 'maxvo2'
        
          
          @children['absolute'] = {:name => 'absolute', :class => HealthVault::WCData::Thing::Types::PositiveDouble, :value => nil, :min => 0, :max => 1, :order => 1, :place => :element, :choice => 0 }
            
          
        
          
          @children['relative'] = {:name => 'relative', :class => HealthVault::WCData::Thing::Types::PositiveDouble, :value => nil, :min => 0, :max => 1, :order => 2, :place => :element, :choice => 0 }
            
          
        
        end
      end
  end
  end
  
  end
end
