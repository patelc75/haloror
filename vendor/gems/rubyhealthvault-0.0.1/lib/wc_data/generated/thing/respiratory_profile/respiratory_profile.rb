# -*- ruby -*-
#--
# Copyright 2008 Danny Coates, Ashkan Farhadtouski
# All rights reserved.
# See LICENSE for permissions.
#++
# AUTOGENERATED ComplexType

module HealthVault
  module WCData
  module Thing
  module Respiratoryprofile
  
      class Respiratoryprofile < ComplexType
        
  
			 
			 
       
        #<b>REQUIRED</b>
        #<b>summary</b>: The date/time when the respiratory profile answers and measurements were taken.
#<em>value</em> is a HealthVault::WCData::Dates::Datetime
        def when=(value)
          @children['when'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Dates::Datetime
        def when
          return @children['when'][:value]
        end
       
  
			 
			 
       
        
        #<b>summary</b>: The upper zone boundary for the red zone.
#<b>remarks</b>: This zone covers flow between 0 and the specified value (measured in L/s).
#<em>value</em> is a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_red_zone_upper_boundary=(value)
          @children['expiratory-flow-red-zone-upper-boundary'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_red_zone_upper_boundary
          return @children['expiratory-flow-red-zone-upper-boundary'][:value]
        end
       
  
			 
			 
       
        
        #<b>summary</b>: The upper zone boundary for the orange zone.
#<b>remarks</b>: This zone covers flow between the red zone upper boundary and the specified value (measured in L/s).
#<em>value</em> is a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_orange_zone_upper_boundary=(value)
          @children['expiratory-flow-orange-zone-upper-boundary'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_orange_zone_upper_boundary
          return @children['expiratory-flow-orange-zone-upper-boundary'][:value]
        end
       
  
			 
			 
       
        
        #<b>summary</b>: The upper zone boundary for the yellow zone.
#<b>remarks</b>: This zone covers flow between the orange zone upper boundary and the specified value (measured in L/s).
#<em>value</em> is a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_yellow_zone_upper_boundary=(value)
          @children['expiratory-flow-yellow-zone-upper-boundary'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Flowvalue
        def expiratory_flow_yellow_zone_upper_boundary
          return @children['expiratory-flow-yellow-zone-upper-boundary'][:value]
        end
       
  
      
        def initialize
          super
          self.tag_name = 'respiratory-profile'
        
          
          @children['when'] = {:name => 'when', :class => HealthVault::WCData::Dates::Datetime, :value => nil, :min => 1, :max => 1, :order => 1, :place => :element, :choice => 0 }
            
          @children['when'][:value] = HealthVault::WCData::Dates::Datetime.new
            
          
        
          
          @children['expiratory-flow-red-zone-upper-boundary'] = {:name => 'expiratory-flow-red-zone-upper-boundary', :class => HealthVault::WCData::Thing::Types::Flowvalue, :value => nil, :min => 0, :max => 1, :order => 2, :place => :element, :choice => 0 }
            
          
        
          
          @children['expiratory-flow-orange-zone-upper-boundary'] = {:name => 'expiratory-flow-orange-zone-upper-boundary', :class => HealthVault::WCData::Thing::Types::Flowvalue, :value => nil, :min => 0, :max => 1, :order => 3, :place => :element, :choice => 0 }
            
          
        
          
          @children['expiratory-flow-yellow-zone-upper-boundary'] = {:name => 'expiratory-flow-yellow-zone-upper-boundary', :class => HealthVault::WCData::Thing::Types::Flowvalue, :value => nil, :min => 0, :max => 1, :order => 4, :place => :element, :choice => 0 }
            
          
        
        end
      end
  end
  end
  
  end
end
