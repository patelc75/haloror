xml.instruct! :xml, :version => "1.0"
xml.DataRoot(:num_points => query[:num_points], :startdate => query[:startdate], :enddate => query[:enddate], :serverdate => UtilityHelper.format_datetime_flex(Time.now, nil)) do
  users.each do |user|
    xml.User(:id => user[:id], :first_name => user.profile[:first_name], :last_name => user.profile[:last_name], :connectivity_status => user[:status][:connectivity], :time_remaining => user[:battery][:time_remaining], :timezone => get_timezone_offset(user)) do
      if !user[:last_reading][:timestamp].blank?
        xml.LastReading(:datetime => UtilityHelper.format_datetime_flex(user[:last_reading][:timestamp], user)) do
          xml.heartrate(user[:last_reading][:heartrate])
          xml.hr_min(user[:last_reading][:hr_min])
          xml.hr_max(user[:last_reading][:hr_max])
          #xml.battery(last_reading[:battery])
          xml.activity(user[:last_reading][:activity])
          xml.skin_temp(user[:last_reading][:skin_temp])
          xml.orientation(user[:last_reading][:orientation])
          xml.steps(user[:last_reading][:steps])
          xml.adl(user[:last_reading][:adl])
          xml.battery_outlet_status(user[:status][:battery_outlet])
          xml.battery_level_status(user[:status][:battery_level])
          xml.battery_percentage(user[:battery][:percentage].to_f/100)
        end
      else
        xml.LastReading(:datetime => UtilityHelper.format_datetime_flex(Time.now, user)) do
          xml.heartrate(0)
          xml.hr_min(0)
          xml.hr_max(0)
          #xml.battery(last_reading[:battery])
          xml.activity(0)
          xml.skin_temp(0)
          xml.orientation(0)
          xml.steps(0)
          xml.adl(0)
          xml.battery_outlet_status("No Data")
          xml.battery_level_status(0)
          xml.battery_percentage(0)
      end
            
      xml.DataReadings do
        if user[:data_readings].length > 0
          user[:data_readings].sort_by { |d| d}.each do |timestamp, group|
            xml.DataReading(:datetime => UtilityHelper.format_datetime_flex(timestamp, user)) do
              group.each do |reading|
                if reading.class.to_s == 'Vital' || reading[:type] == 'Vital'  #averaged data uses hashes and and discrete data uses objects 
                  if reading[:heartrate] and reading[:hrv]
                    xml.heartrate(reading[:heartrate])  
                    if reading[:hrv] != -1
                      xml.hr_min(reading[:heartrate]-reading[:hrv]/2)
                      xml.hr_max(reading[:heartrate]+reading[:hrv]/2)
                    else
                      xml.hr_min(-1)
                      xml.hr_max(-1)                      
                    end
                  end

                  if reading[:activity]
                    xml.activity(reading[:activity])
                    if reading[:orientation]
                      xml.orientation(reading[:orientation])
                      xml.adl(Vital.get_adl(reading[:orientation], reading[:activity]))
                    end
                  end
                elsif reading.class.to_s == 'SkinTemp' || reading[:type] == 'SkinTemp'
                  if reading[:skin_temp]
                    xml.skin_temp(reading[:skin_temp])
                  end
                elsif reading.class.to_s == 'Step' || reading[:type] == 'Step'
                  if reading[:steps]
                    xml.steps(reading[:steps])
                  end
                elsif reading.class.to_s == 'Battery' || reading[:type] == 'Battery'
                  if reading[:percentage]
                    xml.battery(".#{reading[:percentage]}")
                  end
                end
              end
            end
          end
        end
      end

      xml.Events do
        if user[:events].length > 0
          user[:events].each do |event|
            xml.Event(:datetime => UtilityHelper.format_datetime_flex(event.timestamp, user), :description => event.string(user), :link => "http://#{request.host}/events/#{event.id}")
          end
        end
      end
    end
  end
end